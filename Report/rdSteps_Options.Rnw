\subsection{Creating Random Steps}

\noindent Now that your telemetry data are cleaned and split into bursts, you can proceed to the next big step: Drawing the random steps. The aim of this chapter is to generate realistic alternative steps that the animal might have taken so you can later compare them with the actually visited location. The ``hab'' package includes the very useful \texttt{rdSteps} function that can read data frames with spatial trajectories, generate random steps from a given distribution and add those steps to the data frame. We will demonstrate the usage of this function with all required arguments and give hints to some extended options.
The \texttt{rdSteps} function reads the following arguments:

\begin{itemize}

\item{\textbf{x} = your trajectory data}\\
The data can be a ltraj object or a data frame. The function \texttt{ld} is a quick way to create a data frame from an ltraj object:
<<>>=
xmpl.cut.df <- ld(xmpl.cut)  
@

\item{\textbf{nrs} = the number of random steps to draw for each observed step}\\
Choosing the number of random steps to generate is certainly not the most important decision when running an SSF, but it is not completely arbitrary either. The number of alternative steps needs to be sufficiently high for producing meaningful results, especially if your species of interest depends on rather rare habitats scattered over the landscape. On the other hand, large numbers of random points can inflate your dataset and lead to long computing times without really changing the results \cite{thurfjell2014applications}. In previous studies, the number of random steps ranged from 2 to 200. As our xmpl dataset is fairly large, we chose 10 - a medium number of random steps.\\

\item{\textbf{rand.dis} = the random distributions for step lengths and turning angles}\\


\item{\textbf{only.others} = include or exclude the current individual when drawing length and angle}\\


\item{\textbf{simult} = draw step lengths and turning angles simultaneously or not}\\
Before setting this parameter, you might want to check for correletaion between turning angle and distance. Such might occur if your individuals tend to turn only in small angles when moving long distances (e.g. a species migrating) but on the other hand turn a lot and move slowly when feeding. If distance and angle correlate, you want to draw them as pairs. If no correlation is found you can pick both variables independently.
To check for correlation, simply \texttt{plot} distance versus angle (code below, result shown in Figure~\ref{fig:cor_1}).

<<cor_1, echo=TRUE, dev="pdf", fig.show="hide">>=
plot(xmpl.cut.df$dist, xmpl.cut.df$rel.angle)
@

\begin{figure}[!htbp]
\captionsetup{width=0.8\textwidth}
\centering
\includegraphics[width=0.6\textwidth]{cor_1.pdf}
\caption{Testing for correlation of the observed turning angle and step length. The y-axis shows the difference in the turning angle.}
\label{fig:cor_1}
\end{figure}

The distribution of points indicates a correlation for longer steps and doing only small turning angles (around 1).


}\\


In the previous paragraphs we demonstrated how to use the rdSteps function with the default options and how to decide whether to draw angle and stepwidth simultaneously. Besides these necessary settings, the rdSteps function can be tweaked with a set of additional options. You can adjust the following options:
\begin{itemize}
\item{Number of random steps}
\item{Distributions for drawing random steps}
\end{itemize}


\\



angles and distances from your observed data to get random steps. The angle is taken from the previous trajectory to the actual one while the distance is taken from the starting point to the next observed position. This means that each burst should at least contain three observed positions to create random steps for one relocation. The first and the last relocations only contribute to the calculation but don't have their ``own'' random steps as there is no previous trajectory an angle could be calculated from. Neither there is an endpoint to draw a distance. This means that the number of poins with random steps is lower as your actual recorded relocations.
but first have to convert our ``ltraj'' object back to a data frame by using \texttt{ld}.






\noindent The plot shows a correlation of step length and turning angle and therefore the random steps should be taken as pairs (\texttt{simult = T}). Per default the angle and distance for each random step is drawn from the observed values you provide with \texttt{x}. If your random steps shall be taken from a different dataset you can do so by writting it in \texttt{rand.dist = YourDataSet}. Hereby, you can also specify a distribution for estimating angle and distance. In our case we stick to the same dataset and apply \texttt{rdSteps}.  

<<echo=TRUE, eval=TRUE>>=
  
xmpl.steps <- rdSteps(x = xmpl.cut, nrs = 10, simult = T, rand.dis = NULL,  
                      distMax = Inf, reproducible = TRUE, only.others = FALSE) 
          # use simult = FALSE if your data is not correlated
@

\noindent The function \texttt{rdSteps} uses some default settings which offer you options to modify your random steps. You can for example, easily change the number of steps taken from the observed data by defining \texttt{nrs} (default is 10) or if you only need steps shorter than a certain value specify \texttt{distMax} to that value (per default all steps are taken). By setting \textt{reproducible = TRUE} a seed is used to get reproducible random steps. If you want to exclude your current individual to draw angle and distance from this set include \texttt{only.others = TRUE}.
\noindent All in all, \texttt{rdSteps} is very straight forward and computes a lot of useful things for you: 

<<>>=
head(xmpl.steps)
@

\noindent The table still includes your ``cat id'', ``burst id'', the ``rel.angle'' and ``dist'' of your observed positions. Furthermore, the ``case'' is provided as categories of 0 and 1 for available and used. The ``strata'' marks all 10 random steps and the visited location so you can later tell your function what to compare.  
Depending on your analysis you might want to compare only your observed positions with the endpoints of your random steps or you want to investigate in the selection of spatial attributes along the path. For latter you need to implement more code because we did not use this option in our tutorial (see the grey box in Figure~\ref{fig:Flowchart}).\\
Now only new coordinates for your random points are missing. Instead two columns provide the differences of your x- and y- coordinates for each random step (``dx'' and ``dy''). To get new coordinates for your random steps we simply add these differences to your initial coordinates and create two new columns. 

<<>>=
xmpl.steps$new_x <- xmpl.steps$x + xmpl.steps$dx
xmpl.steps$new_y <- xmpl.steps$y + xmpl.steps$dy
@
  
\noindent After running this chapter you get your final ``SpatialPointDataFrame'' to use with the selection function.

<<>>=
head(xmpl.steps)
@


\subsection{Different distributions as an option for rdSteps}

!!!!!!!!!!!!!!!NEEDS FURTHER EXPLANATION!!!!!!!!!!!!!!!!!!!!!!!!!!

Different options to extend the rdSteps function





\section{Processing Spatial Covariates}%----------------------------------------------------------------------------------------------------------------------------
\noindent This section explains the handling of spatial parameters that will be tested for selection by the target species. You should store these data in raster files (ESRI *.adf or georeferenced *.tif). These should have the same coordinate system as your telemetry data and should (for time reasons) already be clipped to your study area. For instructions how to do this in R, please read the GIS instructions from the other group ;)   

\subsection{Load Raster Data (ESRI, *.tif, (*.shp))}%------------------------------------------------------------------------------------------------------

\noindent With a simple function stored in the package \texttt{raster} you are able to upload any raster file into R. Examplarily we use raster data on the following parameters for the study area:
\begin{itemize}
\item{ruggedness of the terrain}
\item{land cover}
\item{canopy cover}
\item{distance to the nearest highway}
\item{distance to the nearest road}
\end{itemize}

\noindent For reading the raster data, three packages are required:
<<echo=TRUE, message=FALSE, warning=FALSE>>=
library(raster)
library(rgdal)
library(sp)
@

\noindent The source files for the raster data can be stored in the working directory or loaded by specifying the exact path. The \texttt{raster()} function is a universal and very powerful tool for loading all kinds of raster data. For reading shapefiles, use the \texttt{readOGR()} function. Below is an example of how to read a set of raster layers.
<<>>=
# First, make sure that your working directory is still 
# the one specified earlier:
# getwd()

# Now read the layers (in our case the layers are stored in a different place):
ruggedness <- raster("P:/SSF PROJECT/NEW GIS LAYERS/tri1") 
landcover <- raster("P:/SSF PROJECT/NEW GIS LAYERS/lc_30") 
canopycover <- raster("P:/SSF PROJECT/NEW GIS LAYERS/cc_abmt") 
disthighway <- raster("P:/SSF PROJECT/NEW GIS LAYERS/disthwy")
distroad <- raster("P:/SSF PROJECT/NEW GIS LAYERS/distsmrd")

# It is enough to load the whole folder were your *.adf files are 
# stored in. The function raster() finds the needed files itself. 
@

\noindent You can plot the data for a first overview. As this can take a while with large datasets, we outcommented the following chunk.
<<eval=FALSE>>=
plot(ruggedness) 
plot(landcover)
plot(canopycover)
plot(disthighway)
plot(distroad)
@



\subsection{Raster Extraction}
\noindent Now that you have generated the random steps and loaded the raster data, you can take the next step and actually connect the observed and potential points with the spatial covariates. There are different functions that can do this. When choosing one, you need to consider that raster files are large and juggling with them occupies lots of memory and computing power. For this reason we suggest using the \texttt{extract()} function that allows for querying single pixel values without loading the whole source file into working memory. The code for compiling the final dataset involves three steps: 
\begin{itemize}
\item{Converting the \texttt{xmpl.steps} data frame into a Spatial Points Data frame}
\item{extracting the raster values}
\item{combining them to the final dataset}
\end{itemize}

\noindent Converting \texttt{xmpl.steps} into a ``SpatialPointsDataFrame'':
<<>>= 
xmpl.steps.spdf <- SpatialPointsDataFrame(coords = 
                                          xmpl.steps[,c("new_x","new_y")], 
                                          data = xmpl.steps)
@

\noindent Extracting the values from each raster layer:
<<>>= 
ruggedness.extr <- extract(ruggedness, xmpl.steps.spdf, 
                           method='simple',sp=F, df=T) 
canopycover.extr <- extract(canopycover, xmpl.steps.spdf, 
                            method='simple', sp=F, df=T)
disthighway.extr <- extract(disthighway, xmpl.steps.spdf, 
                            method='simple', sp=F, df=T)
distroad.extr <- extract(distroad, xmpl.steps.spdf, 
                         method='simple', sp=F, df=T)
landcover.extr <- extract(landcover, xmpl.steps.spdf, 
                          method='simple', sp=F, df=T)
@
\noindent The extraction is done separately for each layer. The option \texttt{method = 'simple'} extracts value from nearest cell whereas \texttt{method = 'bilinear'} interpolates from the four nearest cells. You can adjust this option according to the resolution of your dataset and ecological considerations. \texttt{df=T} returns the result as a data frame and \texttt{sp=F} ensures that the output is not added to the original dataset right away. 

\noindent Automatically adding the extracted values to the original dataset sounds like a handy option. For two reasons we do not use it here: Firstly, we want to set the column names manually for not ending up with several columns called ``w001001''. Secondly, our data include a categorial covariate (landcover) that we want to reclassify and flag as a factor.

\noindent This is the code for compiling the final dataset:
<<>>= 
xmpl.steps.spdf$ruggedness <- ruggedness.extr[,2]
xmpl.steps.spdf$canopycover <- canopycover.extr[,2]
xmpl.steps.spdf$disthighway <- disthighway.extr[,2]
xmpl.steps.spdf$distroad <- distroad.extr[,2]

# The landcover covariate comes coded in integers between 0 an 10 
# and is by default (mis)interpreted as an integer string. 

unique(landcover.extr[,2])
# Re-classifying landcover:
xmpl.steps.spdf$landcover <- as.factor(
    ifelse(landcover.extr[,2] == 0,NA,
    ifelse(landcover.extr[,2] < 5, "forest", 
    ifelse(landcover.extr[,2] < 8, "open",NA))))   
@
\noindent Now your final dataset should be ready for analysis. Examine it:  
<<>>=
head(xmpl.steps.spdf)
@


\subsection{Possible extensions to the extract function}

When extracting the environmental covariates, the most straightforward approach is to measure them at the endpoint of a step, just as we did in our example. For some ecological questions it might though be desirable to take into account for the habitat structures along the step as well. Some animals might for example not visit a suitable patch of habitat because it is surrounded by unfavorable or even impassable structures. Fortunately, the \texttt{extract} function is capable of not just extracting values from single points but also along lines. The input data need to be ``SpatialLines'' features which means that you would first have to convert the ``SpatialPoints'' from your dataset. Suitable functions are included in the ``sp'' package. The extracted values could then be accumulated (e.g. terrain ruggedness), averaged or checked for criteria (e.g. ``Does the step cross a cell classified as road?''). Implementing this feature might be a good aim for follow-up projects.





\subsection{Checking for Multicollinearity} % -------------------------------------------------------------------------------------------------------------------------------------------

\noindent Before including all environmental factors in your analysis, you should check if two or even more variables are exact or highly correlated. The threshold for the correlation coefficiant is 0.7 or higher. To create a correlation matrix, we first need to convert the ``Spatial Points Data Frame'' into a data frame. Furthermore the column \texttt{landcover} needs to be changed from ``facotor'' into ``numeric''. 


<<>>=

xmpl.steps.df <- as.data.frame(xmpl.steps.spdf)

Z <- subset(xmpl.steps.df, select=c(ruggedness,canopycover,disthighway,distroad))

Z$landcover <- as.numeric(
    ifelse(xmpl.steps.df$landcover == "forest",0,
    ifelse(xmpl.steps.df$landcover == "open", 1,NA)))

#head(Z)

cor(Z, use="pairwise.complete.obs")


#creating a nice plot

panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
    usr <- par("usr"); on.exit(par(usr))
    par(usr = c(0, 1, 0, 1))
    r <- abs(cor(x, y,use="pairwise.complete.obs"))
    txt <- format(c(r, 0.123456789), digits = digits)[1]
    txt <- paste0(prefix, txt)
    if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
    text(0.5, 0.5, txt, cex = cex.cor * r)
}

panel.hist <- function(x, ...)
{
    usr <- par("usr"); on.exit(par(usr))
    par(usr = c(usr[1:2], 0, 1.5) )
    h <- hist(x, plot = FALSE)
    breaks <- h$breaks; nB <- length(breaks)
    y <- h$counts; y <- y/max(y)
    rect(breaks[-nB], 0, breaks[-1], y, col = "cyan", ...)
}


pairs(Z, lower.panel=panel.smooth,
      upper.panel=panel.cor,diag.panel=panel.hist)
@

\noindent As you can see, the canopycover and the landcover are highly correlated. The correlation coefficient for the distance to roads and the distance to highways is very high as well. For our further analysis we therefore only use landcover and the distance to roads.